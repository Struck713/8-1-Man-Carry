   // just moved this out of the way
   //
   // left = l
   // right = r
   //
   // i = columns
   // j = rows
   // matrixSizeN = TileManger.COLUMNS
   // matrixSizeM = TileManger.ROWS
   // roundingSize = roundingAmount
let tileType = random(tileManager.getTilesByType(TileManager.Types.BORDER_SAND));
this.tiles[column][row] = new Tile(tileType.index, tileType.properties.collide, row, column);


let roundingAmount = 6;
let left = roundingAmount;
let right = TileManger.ROWS - roundingAmount;

for(let columns = 1; columns < TileManager.COLUMNS; ++columns) {
    let rows = 1;

    if(columns < TileManager.COLUMNS - 3) {
        while(rows < left) {
            let tileType = random(tileManager.getTilesByType(TileManager.Types.BORDER_SAND));
            this.tiles[column][row] = new Tile(tileType.index, tileType.properties.collide, row, column);
            ++rows;
        }

        if(left > 0)
            --left;

        while(rows < TileManger.ROWS - 1) {
            if(rows > TileManager.ROWS / 2 + 3 && rows >= right) {
                let tileType = random(tileManager.getTilesByType(TileManager.Types.BORDER_SAND));
                this.tiles[column][row] = new Tile(tileType.index, tileType.properties.collide, row, column);
                ++rows;
            }
            ++rows;
        }
        ++right;
    }
}

left = roundingAmount;
right = TileManager.ROWS - roundingAmount;

for(let columns = TileManager.COLUMNS - 1; columns > 1; --columns) {
    let rows = 1;

    if(columns > TileManager.COLUMNS / 2 + 3) {
        while(rows <= left) {
            let tileType = random(tileManager.getTilesByType(TileManager.Types.BORDER_SAND));
            this.tiles[column][row] = new Tile(tileType.index, tileType.properties.collide, row, column);
            ++rows;
        }
        if(left > 0)
            --left;

        while(rows < TileManger.ROWS - 1) {
            if(rows >= TileManager.ROWS / 2 + 3 && rows >= right) {
                let tileType = random(tileManager.getTilesByType(TileManager.Types.BORDER_SAND));
                this.tiles[column][row] = new Tile(tileType.index, tileType.properties.collide, row, column);
            }
            ++rows;
        }
        ++right;
    }
}